name: Deploy to Amazon ECR

on:
  push:
    branches:
      - dev
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build with gradle
        run: |
          cd server/server
          chmod +x gradlew
          ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{steps.login-ecr.outputs.registry}}
          REPOSITORY: web-server
          IMAGE_TAG: ${{github.sha}}
        run: |
          docker build --platform=linux/amd64 -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./server/server
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          IMAGE: ${{steps.build-image.outputs.image}}
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script : |
            cd web-server
            docker login -u AWS -p $(aws ecr get-login-password --region $${{secrets.AWS_REGION}}) $${{secrets.AWS_ECR_REGISTRY}}
            docker rm -f $(docker ps -qa)
            docker rmi $(docker images -q)
            docker pull ${{steps.build-image.outputs.image}}
            docker run -p 8080:8080 -d ${{steps.build-image.outputs.image}}